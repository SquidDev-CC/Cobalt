plugins {
    id "com.github.hierynomus.license" version "0.15.0"
	// Checker Framework pluggable type-checking
	id 'org.checkerframework' version '0.5.17'
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'org.checkerframework'

group = 'org.squiddev'
version = '0.5.1-SNAPSHOT'

targetCompatibility = sourceCompatibility = 1.8
compileTestJava.sourceCompatibility = compileTestJava.targetCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
	deployerJars
}

sourceSets {
	doubles {
		compileClasspath += sourceSets.main.compileClasspath
	}
	main {
		compileClasspath += sourceSets.doubles.output
		runtimeClasspath += sourceSets.doubles.output
	}
	test {
		compileClasspath += sourceSets.doubles.output
		runtimeClasspath += sourceSets.doubles.output
	}
}

dependencies {
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.0'
	testImplementation 'org.hamcrest:hamcrest-library:2.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'

	testCompile 'org.openjdk.jmh:jmh-core:1.23'
	testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.23'

	deployerJars "org.apache.maven.wagon:wagon-ssh:3.3.1"
}

license {
	strictCheck true
	include("*.java")
}

checkerFramework {
	checkers = [
			'org.checkerframework.checker.signedness.SignednessChecker'
	]
	// add '-PskipCheckerFramework' to the command line to speed up the build
}
tasks.withType(JavaCompile).configureEach {
	if (name == "compileJava" || name == "compileTestJava") {
		checkerFramework {
			skipCheckerFramework = true;
		}
	}
}


task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

uploadArchives {
	repositories {
		if(project.hasProperty('mavenUploadUrl')) {
			mavenDeployer {
				configuration = configurations.deployerJars

				repository(url: project.property('mavenUploadUrl')) {
					authentication(
						userName: project.property('mavenUploadUser'),
						privateKey: project.property('mavenUploadKey'))
				}

				pom.project {
					name 'Cobalt'
					packaging 'jar'
					description 'A reentrant fork of LuaJ for Lua 5.1'
					url 'https://github.com/SquidDev/Cobalt'

					scm {
						url 'https://github.com/SquidDev/Cobalt.git'
					}

					issueManagement {
						system 'github'
						url 'https://github.com/SquidDev/Cobalt/issues'
					}

					licenses {
						license {
							name 'MIT'
							url 'https://github.com/SquidDev/Cobalt/blob/master/LICENSE'
							distribution 'repo'
						}
					}
				}
			}
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar { classifier "sources" }
			artifact javadocJar { classifier "javadoc" }
		}
	}
}

gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint"
	}
}

task executeProfile(type: JavaExec) {
	main = "org.squiddev.cobalt.PerformanceBenchmark"
	classpath = sourceSets.test.runtimeClasspath
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
    }
}
